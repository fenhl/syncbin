alias -- -='cd -'
function a {
    if [[ $# -eq 0 ]]; then
        atom . &&
        ruler
    elif [[ $# -eq 1 ]]; then
        atom "$1" &&
        ruler
    else
        echo '[ !! ] too many args' >&2
        exit 1
    fi
}
function a2edit {
    sudo nano /etc/apache2/sites-available/"$1"
    sudo a2ensite "$1" > /dev/null
    sudo service apache2 reload
}
function activate {
    . "$1"/bin/activate
}
function adu {
    if [[ "$(uname -s)" == "Darwin" ]]; then
        sudo softwareupdate -ir
    else
        sudo apt-get update &&
        sudo apt-get dist-upgrade &&
        sudo apt-get autoremove &&
        sudo cron-apt &&
        sudo "$(where night-device-report)"
    fi
}
function bn {
    git bisect $(git bisect terms --term-new)
}
function bo {
    git bisect $(git bisect terms --term-old)
}
function brew-caveats {
    brew info ${@:-$(brew list)} | awk '/^==> Caveats$/,/^[a-z][a-zA-Z0-9_+-]+: stable |^==> (Dependencies|Options)$/'
}
alias caveats='brew-caveats'
function chmox {
    if ! [[ -f "$1" ]]; then
        touch "$1"
    fi
    chmod +x "$1"
}
if ! (crontab -il |& grep 'unrecognized option' &> /dev/null); then
    alias crontab='crontab -i'
fi
if which discoveryutil &> /dev/null; then
    alias clear-dns-cache='sudo discoveryutil mdnsflushcache && sudo discoveryutil udnsflushcaches'
else
    alias clear-dns-cache='sudo dscacheutil -flushcache && sudo killall -HUP mDNSResponder'
fi
function date {
    if [ "$#" -gt 0 ]; then
        command date "$@"
        return $?
    else
        command date -u '+[date] w%V.%u: %Y-%m-%d %H:%M:%S'
        return $?
    fi
}
function dawg {
    if [ "$#" -eq 2 ]; then
        mkdir /tmp/dawg &&
        mv "$1" /tmp/dawg/dawg &&
        mkdir "$1" &&
        mv /tmp/dawg/dawg "$1"/"$2" &&
        rmdir /tmp/dawg
    else
        echo 'Usage: dawg <dir> <subdir>' >&2
        exit 1
    fi
}
alias doch='sudo $(fc -ln -1)'
alias flush-dns-cache='clear-dns-cache'
function frame {
    ffmpeg -loglevel error -i - -ss "$1" -t 0.5 -r 1 -f image2 -
}
if alias g > /dev/null; then
    unalias g
fi
function g { # from https://github.com/pengwynn/dotfiles/blob/master/git/git.zsh
    if [ "$#" -gt 0 ]; then
        git "$@"
        return $?
    else
        git status --short --branch
        return $?
    fi
}
compdef g=git
if alias ga > /dev/null; then
    unalias ga
fi
function gco {
    git checkout "$@" 2>/dev/null || g checkout -b "$@"
}
function gd {
    git diff --color "$@" | less -R
}
alias gds='gd --staged'
alias history='fc -il 1'
if alias ll > /dev/null; then
    unalias ll
fi
function ll {
    if ls --group > /dev/null 2>&1; then
        # GNU ls
        CLICOLOR_FORCE=1 ls --color=always --group -Fabhl "$@" | less -R
    else
        # BSD ls
        CLICOLOR_FORCE=1 ls -BFGahl "$@" | less -R
    fi
}
compdef ll=ls
alias mkcd='take'
if ! (where pip3 &> /dev/null); then
    if where pip-3.6 &> /dev/null; then
        alias pip3='pip-3.6'
    elif where pip-3.5 &> /dev/null; then
        alias pip3='pip-3.5'
    elif where pip-3.4 &> /dev/null; then
        alias pip3='pip-3.4'
    fi
fi
function mnt {
    sudo mkdir "$2" &&
    sudo mount "$1" "$2"
}
compdef mnt=mount
alias notify='terminal-notifier -sound default -message'
if ! (where pcregrep &> /dev/null); then
    alias pcregrep='grep -P'
fi
function pw {
    if [[ $# -gt 0 ]]; then
        while [[ $# -gt 0 ]]; do
            pwgen -1cnsy "$1" 1
            shift
        done
    else
        echo $'Usage:\n  pw <length>' >&2
    fi
}
alias rand='shuf -n 1 -i'
function read-pem {
    if [[ $# -eq 1 ]]; then
        sudo openssl x509 -in "$1" -text -noout
    else
        echo $'Usage:\n  read-pem <cert>' >&2
    fi
}
alias relog=': $@; zsh && logout'
function reset {
    if [ "$#" -gt 0 ]; then
        command reset "$@"
        return $?
    else
        command reset
        stty -ixon # disable flow control
    fi
}
function retab {
    if where tab &> /dev/null; then
        tab "$@"
        logout
    else
        where tab
        return $?
    fi
}
function retry {
    until eval ${(q)@}; do
        command sleep 1 || return 1
    done
}
function rm { # remove current directory when called without arguments
    if [ "$#" -gt 0 ]; then
        command rm "$@"
        return $?
    else
        command rm -r .
        return $?
    fi
}
function rr {
    if [ "$#" -gt 0 ]; then
        command rm -rf "$@"
        return $?
    else
        command rm -rf .
        return $?
    fi
}
compdef rr=rm
if ! (where shuf &> /dev/null) && where gshuf &> /dev/null; then
    alias shuf='gshuf'
fi
function sshmount {
    sudo mkdir /Volumes/"$1"
    sudo chown $(whoami) /Volumes/"$1"
    sshfs "$1":/ /Volumes/"$1"
}
if ! (where svg2pdf &> /dev/null); then
    alias svg2pdf='cairosvg -f pdf'
fi
if ! (where svg2png &> /dev/null); then
    alias svg2png='cairosvg -f png'
fi
if ! (where svg2ps &> /dev/null); then
    alias svg2ps='cairosvg -f ps'
fi
alias syncbin-version='cat ${HUB:-/opt/hub}/fenhl/syncbin/version.txt'
if ! (where tac &> /dev/null); then
    alias tac='tail -r'
fi
function take {
    mkdir -p "$1" &&
    cd "$1"
}
compdef take=mkdir
if ! (where tweet &> /dev/null); then
    alias tweet='t update'
fi
function udawg {
    if [ "$#" -eq 2 ]; then
        mkdir /tmp/dawg &&
        mv "$1"/"$2" /tmp/dawg/dawg &&
        rmdir "$1" &&
        mv /tmp/dawg/dawg "$1" &&
        rmdir /tmp/dawg
    else
        echo 'Usage: undawg <dir> <subdir>' >&2
        exit 1
    fi
}
function umnt {
    sudo umount "$1" &&
    sudo rmdir "$1"
}
compdef umnt=umount
alias undawg='udawg'
alias view='less' # view is less for now, working on a script that uses cat if the file is shorter than the terminal height
# define aliases from loaded oh-my-zsh plugins
for plugin in $OMZ_PLUGINS; do
    if [ -f ${HOME}/git/github.com/robbyrussell/oh-my-zsh/master/plugins/$plugin/$plugin.plugin.zsh ]; then
        . ${HOME}/git/github.com/robbyrussell/oh-my-zsh/master/plugins/$plugin/$plugin.plugin.zsh
    elif [ -f /opt/git/github.com/robbyrussell/oh-my-zsh/master/plugins/$plugin/$plugin.plugin.zsh ]; then
        . /opt/git/github.com/robbyrussell/oh-my-zsh/master/plugins/$plugin/$plugin.plugin.zsh
    fi
done
# define Bourne shell aliases
. aliases
