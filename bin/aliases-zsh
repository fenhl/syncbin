alias -- -='cd -'
function activate {
    : from syncbin
    . "$1"/bin/activate
    export PIP="$1"/bin/pip
}
function adu {
    : from syncbin
    if [[ "$(uname -s)" == "Darwin" ]]; then
        sudo softwareupdate -ir
    else
        night --timeout=10 defer "/dev/$(night hostname)/cronApt" r:10m
        sudo apt-get -y update &&
        sudo apt-get -y dist-upgrade &&
        sudo apt-get -y autoremove &&
        sudo cron-apt &&
        announce sudo "$(where night-device-report)"
    fi
}
function announce {
    : from syncbin
    printf '[ ** ] '
    echo "$@"
    "$@"
}
function bn {
    : from syncbin
    git bisect $(git bisect terms --term-new)
}
function bo {
    : from syncbin
    git bisect $(git bisect terms --term-old)
}
function brew-caveats {
    : from syncbin
    brew info ${@:-$(brew list)} | awk '/^==> Caveats$/,/^[a-z][a-zA-Z0-9_+-]+: stable |^==> (Dependencies|Options)$/'
}
alias caveats='brew-caveats'
function chmox {
    : from syncbin
    if ! [[ -f "$1" ]]; then
        touch "$1"
    fi
    chmod +x "$1"
}
function cl {
    cargo --color=always "$@" |& less -r
    return $?
}
compdef cl=cargo
if ! (crontab -il |& grep 'unrecognized option' &> /dev/null); then
    alias crontab='crontab -i'
fi
if which discoveryutil &> /dev/null; then
    alias clear-dns-cache='sudo discoveryutil mdnsflushcache && sudo discoveryutil udnsflushcaches'
else
    alias clear-dns-cache='sudo dscacheutil -flushcache && sudo killall -HUP mDNSResponder'
fi
function date {
    : from syncbin
    if [ "$#" -gt 0 ]; then
        command date "$@"
        return $?
    else
        command date -u '+w%V.%u: %Y-%m-%d %H:%M:%S'
        return $?
    fi
}
function dawg {
    : from syncbin
    if [ "$#" -eq 2 ]; then
        mkdir /tmp/dawg &&
        mv "$1" /tmp/dawg/dawg &&
        mkdir "$1" &&
        mv /tmp/dawg/dawg "$1"/"$2" &&
        rmdir /tmp/dawg
    else
        echo 'Usage: dawg <dir> <subdir>' >&2
        exit 1
    fi
}
alias flush-dns-cache='clear-dns-cache'
function frame {
    : from syncbin
    ffmpeg -loglevel error -i - -ss "$1" -t 0.5 -r 1 -f image2 -
}
if alias g > /dev/null; then
    unalias g
fi
function g { # from https://github.com/pengwynn/dotfiles/blob/master/git/git.zsh
    : from syncbin
    if [ "$#" -gt 0 ]; then
        git "$@"
        return $?
    else
        git status --short --branch
        return $?
    fi
}
compdef g=git
function gco {
    : from syncbin
    git checkout "$@" 2>/dev/null || g checkout -b "$@"
}
function gd {
    : from syncbin
    if [[ x"$TERM_PROGRAM" == x'vscode' ]] && git config diff.tool > /dev/null; then
        if [[ -n "$STY" ]] || [[ -n "$SSH_CLIENT" ]] || [[ -n "$SSH_TTY" ]]; then
            : # inside VS Code but also inside an SSH session or screen, use the regular `git diff`
        else
            git difftool -y "$@"
            return $?
        fi
    fi
    git diff --color "$@" | less -R
    return $?
}
alias gds='gd --staged'
function gpu {
    : from syncbin
    git push --set-upstream origin "$(git rev-parse --abbrev-ref HEAD)" &&
    gpp
}
alias history='fc -il 1'
function in {
    ( cd "$1" && shift && "$@" )
}
function jpg2png {
    for file in $1/*.jpg; do
        printf '[....] '"$file"'\r' &&
        convert "$file" "${file/.jpg/.png}" &&
        rm "$file" &&
        echo '[ ok ]'
    done
}
if echo '{}' | command jq -Sa --indent 4 '.' &> /dev/null; then
    alias jq='command jq -Sa --indent 4'
else
    alias jq='command jq -S -a'
fi
if alias l > /dev/null; then
    unalias l
fi
function l {
    : from syncbin
    if [[ $# -lt 1 ]]; then
        file=.
    else
        file="$1"
    fi
    if [[ -L "$file" ]]; then
        readlink "$@"
    elif [[ -d "$file" ]]; then
        if which eza > /dev/null 2>&1; then
            # eza
            eza -Gabgl --sort=Name --color=always --time-style=long-iso "$@"
        elif which exa > /dev/null 2>&1; then
            # exa
            exa -FGabgl --sort=Name --color=always --time-style=long-iso "$@"
        elif ls --group > /dev/null 2>&1; then
            # GNU ls
            ls --color=always --group --time-style='+%Y-%m-%d %H:%M:%S' -Fabhl "$@"
        else
            # BSD ls
            ls -BFGahl "$@"
        fi
    elif [[ -f "$file" ]]; then
        if [[ x"$(more --version | head -c 4)" == x'less' ]]; then
            more -e "$@"
        else
            more "$@"
        fi
    else
        stat "$@"
    fi
}
if alias ll > /dev/null; then
    unalias ll
fi
function ll {
    : from syncbin
    if [[ $# -lt 1 ]]; then
        file=.
    else
        file="$1"
    fi
    if [[ -L "$file" ]]; then
        readlink "$@"
    elif [[ -d "$file" ]]; then
        if where eza &> /dev/null; then
            # eza
            eza --classify=always -abgl -TL1 --sort=Name --color=always --time-style=long-iso "$@" | less -R
        elif where exa &> /dev/null; then
            # exa
            exa -Fabgl -TL1 --sort=Name --color=always --time-style=long-iso "$@" | less -R
        elif ls --group > /dev/null 2>&1; then
            # GNU ls
            CLICOLOR_FORCE=1 ls --color=always --group -Fabhl "$@" | less -R
        else
            # BSD ls
            CLICOLOR_FORCE=1 ls -BFGahl "$@" | less -R
        fi
    elif [[ -f "$file" ]]; then
        less "$@"
    else
        stat "$@"
    fi
}
compdef ll=ls
function mkcd {
    : from syncbin
    mkdir -p "$1" &&
    cd "$1"
}
compdef mkcd=mkdir
if ! (where pip3 &> /dev/null); then
    alias pip3='python3 -m pip'
fi
function mnt {
    : from syncbin
    sudo mkdir "$2" &&
    sudo mount "$1" "$2"
}
compdef mnt=mount
function notify {
    : from syncbin
    if where terminal-notifier &> /dev/null; then
        terminal-notifier -sound default -message "$*"
    elif where ssmtp &> /dev/null; then
        echo $'To: fenhl@fenhl.net\nFrom: '"$(whoami)"'@'"$(hostname -f)"$'\nSubject: notification\n\n'"$@" | ssmtp 'fenhl@fenhl.net'
    else
        echo "$@"
    fi
}
if ! (where pcregrep &> /dev/null); then
    alias pcregrep='grep -P'
fi
if ! (where pip3i &> /dev/null); then
    alias pip3i='python3 -m pip install --user'
fi
function pw {
    : from syncbin
    if [[ $# -gt 0 ]]; then
        while [[ $# -gt 0 ]]; do
            pwgen -1cnsy "$1" 1
            shift
        done
    else
        echo $'Usage:\n  pw <length>' >&2
    fi
}
alias rand='shuf -n 1 -i'
function read-pem {
    : from syncbin
    if [[ $# -eq 1 ]]; then
        sudo openssl x509 -in "$1" -text -noout
    else
        echo $'Usage:\n  read-pem <cert>' >&2
    fi
}
function reconnect {
    retry ssh "$1" true &&
    notify "connection to $1 restored" &&
    ssh "$@"
}
function reset {
    : from syncbin
    if [ "$#" -gt 0 ]; then
        command reset "$@"
        return $?
    else
        command reset
        stty -ixon # disable flow control
    fi
}
function retry {
    : from syncbin
    if [[ $# -eq 0 ]]; then
        until eval "$(fc -ln -1)"; do
            command sleep 1 || return 1
        done
    else
        until eval ${(q)@}; do
            command sleep 1 || return 1
        done
    fi
}
function rj { # restart the given systemd unit, then follow its journal
    : from syncbin
    sudo systemctl restart "$1" && sudo journalctl --unit="$1" --follow
}
if ! (where shuf &> /dev/null) && where gshuf &> /dev/null; then
    alias shuf='gshuf'
fi
function sshdu {
    : from syncbin
    ssh -C "$1" ncdu -o- / | ncdu -f-
}
function sshmount {
    : from syncbin
    sudo mkdir /Volumes/"$1"
    sudo chown $(whoami) /Volumes/"$1"
    sshfs "$1":/ /Volumes/"$1"
}
if ! (where svg2pdf &> /dev/null); then
    alias svg2pdf='cairosvg -f pdf'
fi
if ! (where svg2png &> /dev/null); then
    alias svg2png='cairosvg -f png'
fi
if ! (where svg2ps &> /dev/null); then
    alias svg2ps='cairosvg -f ps'
fi
alias syncbin-version='cat ${GITDIR:-/opt/git}/github.com/fenhl/syncbin/master/version.txt'
if ! (where tac &> /dev/null); then
    alias tac='tail -r'
fi
if ! (where tweet &> /dev/null); then
    alias tweet='t update'
fi
function udawg {
    : from syncbin
    if [ "$#" -eq 2 ]; then
        mkdir /tmp/dawg &&
        mv "$1"/"$2" /tmp/dawg/dawg &&
        rmdir "$1" &&
        mv /tmp/dawg/dawg "$1" &&
        rmdir /tmp/dawg
    else
        echo 'Usage: undawg <dir> <subdir>' >&2
        exit 1
    fi
}
function umnt {
    : from syncbin
    sudo umount "$1" &&
    sudo rmdir "$1"
}
compdef umnt=umount
alias undawg='udawg'
alias view='less' # view is less for now, working on a script that uses cat if the file is shorter than the terminal height
# define aliases from loaded oh-my-zsh plugins
which tab > /dev/null
tab_exists=$?
for plugin in $OMZ_PLUGINS; do
    if [ -f ${HOME}/git/github.com/robbyrussell/oh-my-zsh/master/plugins/$plugin/$plugin.plugin.zsh ]; then
        . ${HOME}/git/github.com/robbyrussell/oh-my-zsh/master/plugins/$plugin/$plugin.plugin.zsh
    elif [ -f /opt/git/github.com/robbyrussell/oh-my-zsh/master/plugins/$plugin/$plugin.plugin.zsh ]; then
        . /opt/git/github.com/robbyrussell/oh-my-zsh/master/plugins/$plugin/$plugin.plugin.zsh
    fi
done
if [ $tab_exists -eq 0 ]; then
    unfunction tab # `tab` defined in syncbin-private, don't shadow with the omz-macos command
fi
# define Bourne shell aliases
. aliases
