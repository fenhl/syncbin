#!/bin/zsh

github-install () {
    printf "[....] installing $2"
    
    if [ -d /opt/hub ] && [ -w /opt/hub ]; then
        HUB=/opt/hub
    else
        HUB=${HOME}/hub
    fi
    
    if mkdir -p ${HUB}/"$1" 2> /dev/null && [ -d ${HUB}/"$1" ]; then
        cd ${HUB}/"$1"
    else
        echo "\r"'[!!!!]' "could not create directory ${HUB}/$1" >&2
        return 1
    fi
    
    if which hub > /dev/null; then
        echo " using hub\r"'[ ** ]'
        if [ -d ${HUB}/"$1"/"$2" ] && { cd ${HUB}/"$1"/"$2"; hub branch > /dev/null 2>&1; }; then
            cd ${HUB}/"$1"/"$2"
            hub pull || return 1
        else
            [ -d ${HUB}/"$1"/"$2" ] && rm -r ${HUB}/"$1"/"$2"
            cd ${HUB}/"$1"
            hub clone "$1"/"$2" || return 1
        fi
    elif which git > /dev/null; then
        echo " using git\r"'[ ** ]'
        if [ -d ${HUB}/"$1"/"$2" ] && { cd ${HUB}/"$1"/"$2"; git branch > /dev/null 2>&1; }; then
            cd ${HUB}/"$1"/"$2"
            git pull origin master || return 1
        else
            [ -d ${HUB}/"$1"/"$2" ] && rm -r ${HUB}/"$1"/"$2"
            cd ${HUB}/"$1"
            git clone git@github.com:"$1"/"$2".git || return 1
        fi
    else
        echo "\r"'[!!!!]' "missing git command" >&2
        return 1
    fi
}

if [[ $# -eq 0 ]]; then
    if [ -d /opt/hub/fenhl/syncbin ]; then
        cd /opt/hub/fenhl/syncbin
    else
        cd ~/hub/fenhl/syncbin
    fi
    OLD=$(cat version.txt)
    git fetch
    if [[ $(git rev-parse HEAD) == $(git rev-parse @{u}) ]]; then
        exit 0
    else
        git pull --rebase > /dev/null
        if [[ $? -ne 0 ]]; then
            exit 1
        fi
        NEW=$(cat version.txt)
        syncbin-update ${OLD} ${NEW}
        exit $?
    fi
elif [[ $# -eq 2 ]]; then
    OLD=$1
    NEW=$2
else
    echo '[ !! ] could not run syncbin update script, wrong arguments' >&2
    exit 1
fi

OLDARRAY=("${(s/./)OLD}")
OLDMAJOR=$OLDARRAY[1]
OLDMINOR=$OLDARRAY[2]

NEWARRAY=("${(s/./)NEW}")
NEWMAJOR=$NEWARRAY[1]
NEWMINOR=$NEWARRAY[2]

if [[ ${NEWMAJOR} -lt ${OLDMAJOR} ]]; then
    echo '[ !! ]' "Attempted to downgrade syncbin from ${OLD} to ${NEW}, aborting" >&2
    exit 1
fi
if [[ ${NEWMAJOR} -gt ${OLDMAJOR} ]]; then
    echo '[ ** ] A major revision of syncbin is available. Check the update instructions with `less ${HUB}/fenhl/syncbin/config/update.txt`'
    exit 0
fi
if [[ ${NEWMINOR} -lt ${OLDMINOR} ]]; then
    echo '[ !! ]' "Attempted to downgrade syncbin from ${OLD} to ${NEW}, aborting" >&2
    exit 1
fi
if [[ ${NEWMINOR} -gt ${OLDMINOR} ]]; then
    if [[ ${OLDMINOR} -lt 3 ]]; then # update to first version with working update script
        echo '[ ** ] To update, the syncbin install script will re-run now.'
        sh config/install.sh || echo '[ ** ] Updating syncbin failed, please run again manually.'
        exit 0
    else
        if [[ ${OLDMINOR} -lt 4 ]]; then
            if [ "$(uname -s)" = "Darwin" ]; then
                brew install zsh-completions
            else
                github-install zsh-users zsh-completions
            fi
        fi
    fi
    echo '[ ** ]' "syncbin has been updated from ${OLD} to ${NEW}, relog for changes to take effect"
    exit 0
fi
echo '[ ** ] syncbin has been patched, relog for changes to take effect'
