#!/bin/zsh

githubinstall () {
    printf "[....] installing $2"
    
    if [[ -d /opt/git/github.com ]] && [[ -w /opt/git/github.com ]]; then
        HUB=/opt/git/github.com
    else
        HUB=${HOME}/git/github.com
    fi
    
    if mkdir -p "${HUB}/$1/$2" 2> /dev/null && [[ -d "${HUB}/$1/$2" ]]; then
        cd ${HUB}/"$1"/"$2"
    else
        echo "\r"'[!!!!]' "could not create directory ${HUB}/$1/$2" >&2
        return 1
    fi
    
    if which git &> /dev/null; then
        echo " using git\r"'[ ** ]'
        if [[ -d "${HUB}/$1/$2/master" ]] && { cd "${HUB}/$1/$2/master"; git branch &> /dev/null; }; then
            cd "${HUB}/$1/$2/master"
            git pull origin master || return 1
        else
            [[ -d "${HUB}/$1/$2/master" ]] && rm -r "${HUB}/$1/$2/master"
            cd "${HUB}/$1/$2"
            git clone git@github.com:"$1"/"$2".git master || git clone https://github.com/"$1"/"$2".git master || return 1
        fi
    else
        echo "\r"'[!!!!]' "missing git command" >&2
        return 1
    fi
}

if [[ $# -eq 0 ]]; then
    if [[ -d /opt/git/github.com/fenhl/syncbin/master ]]; then
        cd /opt/git/github.com/fenhl/syncbin/master
    else
        cd ~/git/github.com/fenhl/syncbin/master
    fi
    if [[ -r "${XDG_DATA_HOME:-${HOME}/.local/share}/syncbin/version.txt" ]]; then
        OLD=$(cat "${XDG_DATA_HOME:-${HOME}/.local/share}/syncbin/version.txt")
    else
        OLD=$(cat version.txt)
    fi
    git fetch --quiet readonly master
    git fetch --quiet
    PATCHED="n"
    if [[ $(git rev-parse HEAD) != $(git rev-parse @{u}) ]]; then
        PATCHED="y"
        git pull --rebase --quiet readonly master > /dev/null || git pull --rebase --quiet > /dev/null
        if [[ $? -ne 0 ]]; then
            exit 1
        fi
    fi
    NEW=$(cat version.txt)
    if [[ $PATCHED == "y" ]] || [[ "${OLD}" != "${NEW}" ]]; then
        if which zsh &> /dev/null; then
            syncbin-update ${OLD} ${NEW}
        else
            bash syncbin-update ${OLD} ${NEW}
        fi
        exit $?
    fi
    exit 0
elif [[ $# -eq 2 ]]; then
    OLD=$1
    NEW=$2
else
    echo '[ !! ] could not run syncbin update script, wrong arguments' >&2
    exit 1
fi

if [[ "$0" == "-zsh" ]] || [[ "$0" == "zsh" ]]; then
    OLDARRAY=("${(s/./)OLD}")
    OLDMAJOR=$OLDARRAY[1]
    OLDMINOR=$OLDARRAY[2]
    
    NEWARRAY=("${(s/./)NEW}")
    NEWMAJOR=$NEWARRAY[1]
    NEWMINOR=$NEWARRAY[2]
elif [[ "$0" == "-bash" ]] || [[ "$0" == "bash" ]]; then
    IFS='.' read -a OLDARRAY <<< "$OLD"
    OLDMAJOR="${OLDARRAY[0]}"
    OLDMINOR="${OLDARRAY[1]}"
    
    IFS='.' read -a NEWARRAY <<< "$NEW"
    NEWMAJOR="${NEWARRAY[0]}"
    NEWMINOR="${NEWARRAY[1]}"
else
    echo '[ !! ]' "Failed to read version number, incompatible shell"
    exit 1
fi

(mkdir -p "${XDG_DATA_HOME:-${HOME}/.local/share}/syncbin" && touch "${XDG_DATA_HOME:-${HOME}/.local/share}/syncbin/version.txt" &> /dev/null && echo "$NEW" > "${XDG_DATA_HOME:-${HOME}/.local/share}/syncbin/version.txt" 2> /dev/null) || echo '[ !! ]' "Could not write to ${XDG_DATA_HOME:-${HOME}/.local/share}/syncbin/version.txt, this might break syncbin updates" >&2

if [[ ${NEWMAJOR} -lt ${OLDMAJOR} ]]; then
    echo '[ !! ]' "Attempted to downgrade syncbin from ${OLD} to ${NEW}, aborting" >&2
    exit 1
fi
if [[ ${NEWMAJOR} -gt ${OLDMAJOR} ]]; then
    echo '[ ** ] A major revision of syncbin is available. Check the update instructions with `less ${HUB}/fenhl/syncbin/config/update.txt`'
    exit 0
fi
if [[ ${NEWMINOR} -lt ${OLDMINOR} ]]; then
    echo '[ !! ]' "Attempted to downgrade syncbin from ${OLD} to ${NEW}, aborting" >&2
    exit 1
fi
if [[ ${NEWMINOR} -gt ${OLDMINOR} ]]; then
    #if [[ ${OLDMINOR} -lt 3 ]]; then # update to first version with working update script
    #    echo '[ ** ] To update, the syncbin install script will re-run now.'
    #    sh config/install.sh || echo '[ !! ] Updating syncbin failed, please run again manually.' >&2
    #    exit 0
    #else
    #    if [[ ${OLDMINOR} -lt 5 ]]; then
    #        if [[ "$(uname -s)" == "Darwin" ]]; then
    #            brew install zsh-completions
    #        else
    #            githubinstall zsh-users zsh-completions
    #        fi
    #    fi
    #    if [[ ${OLDMINOR} -lt 6 ]]; then
    #        if [[ "$(uname -s)" == "Linux" ]] && [[ "$(lsb_release -si)" == "Debian" ]]; then
    #            if which "command-not-found" &> /dev/null; then
    #                : # command-not-found handler already installed
    #            else
    #                echo '[ ** ] syncbin now supports command-not-found, install using `sudo apt-get install command-not-found`'
    #            fi
    #        fi
    #    fi
    #    if [[ ${OLDMINOR} -lt 7 ]]; then
    #        if which lns &> /dev/null; then
    #            # lns already installed
    #        else
    #            mkdir -p ~/bin &&
    #            cd ~/bin
    #            if (which curl &> /dev/null && curl -Ls http://www.chiark.greenend.org.uk/~sgtatham/utils/lns.tar.gz | tar -xzf -) || (which wget &> /dev/null && wget -qO - http://www.chiark.greenend.org.uk/~sgtatham/utils/lns.tar.gz | tar -xzf -); then
    #                rm -f lns.tar.gz
    #                mv lns .lnsdir
    #                mv .lnsdir/lns lns
    #                rm -rf .lnsdir
    #                chmod +x lns
    #                cd -
    #            else
    #                echo '[ !! ] failed to install lns, you can install manually from http://www.chiark.greenend.org.uk/~sgtatham/utils/' >&2
    #            fi
    #        fi
    #    fi
    #fi
    echo '[ ** ]' "syncbin has been updated from ${OLD} to ${NEW}, relog for changes to take effect"
    exit 0
fi
echo '[ ** ] syncbin has been patched, relog for changes to take effect'
