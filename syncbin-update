#!/bin/zsh

githubinstall () {
    printf "[....] installing $2"
    
    if [[ -d /opt/hub ]] && [[ -w /opt/hub ]]; then
        HUB=/opt/hub
    else
        HUB=${HOME}/hub
    fi
    
    if mkdir -p ${HUB}/"$1" 2> /dev/null && [[ -d ${HUB}/"$1" ]]; then
        cd ${HUB}/"$1"
    else
        echo "\r"'[!!!!]' "could not create directory ${HUB}/$1" >&2
        return 1
    fi
    
    if where git &> /dev/null; then
        echo " using git\r"'[ ** ]'
        if [[ -d ${HUB}/"$1"/"$2" ]] && { cd ${HUB}/"$1"/"$2"; git branch &> /dev/null; }; then
            cd ${HUB}/"$1"/"$2"
            git pull origin master || return 1
        else
            [[ -d ${HUB}/"$1"/"$2" ]] && rm -r ${HUB}/"$1"/"$2"
            cd ${HUB}/"$1"
            git clone git@github.com:"$1"/"$2".git || git clone https://github.com/"$1"/"$2".git || return 1
        fi
    elif where ruby &> /dev/null && where hub &> /dev/null; then
        echo " using hub\r"'[ ** ]'
        if [[ -d ${HUB}/"$1"/"$2" ]] && { cd ${HUB}/"$1"/"$2"; hub branch &> /dev/null; }; then
            cd ${HUB}/"$1"/"$2"
            hub pull || return 1
        else
            [[ -d ${HUB}/"$1"/"$2" ]] && rm -r ${HUB}/"$1"/"$2"
            cd ${HUB}/"$1"
            hub clone "$1"/"$2" || return 1
        fi
    else
        echo "\r"'[!!!!]' "missing git command" >&2
        return 1
    fi
}

if [[ $# -eq 0 ]]; then
    if [[ -d /opt/hub/fenhl/syncbin ]]; then
        cd /opt/hub/fenhl/syncbin
    else
        cd ~/hub/fenhl/syncbin
    fi
    if [[ -r "${XDG_DATA_HOME:-~/.local/share}/syncbin/version.txt" ]]; then
        OLD=$(cat "${XDG_DATA_HOME:-${HOME}/.local/share}/syncbin/version.txt")
    else
        OLD=$(cat version.txt)
    fi
    git fetch --quiet
    PATCHED="n"
    if [[ $(git rev-parse HEAD) != $(git rev-parse @{u}) ]]; then
        PATCHED="y"
        git pull --rebase --quiet > /dev/null
        if [[ $? -ne 0 ]]; then
            exit 1
        fi
    fi
    NEW=$(cat version.txt)
    if [[ $PATCHED == "y" ]] || [[ "${OLD}" != "${NEW}" ]]; then
        syncbin-update ${OLD} ${NEW}
        exit $?
    fi
    exit 0
elif [[ $# -eq 2 ]]; then
    OLD=$1
    NEW=$2
else
    echo '[ !! ] could not run syncbin update script, wrong arguments' >&2
    exit 1
fi

OLDARRAY=("${(s/./)OLD}")
OLDMAJOR=$OLDARRAY[1]
OLDMINOR=$OLDARRAY[2]

NEWARRAY=("${(s/./)NEW}")
NEWMAJOR=$NEWARRAY[1]
NEWMINOR=$NEWARRAY[2]

(mkdir -p "${XDG_DATA_HOME:-${HOME}/.local/share}/syncbin" && touch "${XDG_DATA_HOME:-${HOME}/.local/share}/syncbin/version.txt" &> /dev/null && echo "$NEW" > "${XDG_DATA_HOME:-${HOME}/.local/share}/syncbin/version.txt" 2> /dev/null) || echo '[ !! ]' "Could not write to ${XDG_DATA_HOME:-~/.local/share}/syncbin/version.txt, this might break syncbin updates" >&2

if [[ ${NEWMAJOR} -lt ${OLDMAJOR} ]]; then
    echo '[ !! ]' "Attempted to downgrade syncbin from ${OLD} to ${NEW}, aborting" >&2
    exit 1
fi
if [[ ${NEWMAJOR} -gt ${OLDMAJOR} ]]; then
    echo '[ ** ] A major revision of syncbin is available. Check the update instructions with `less ${HUB}/fenhl/syncbin/config/update.txt`'
    exit 0
fi
if [[ ${NEWMINOR} -lt ${OLDMINOR} ]]; then
    echo '[ !! ]' "Attempted to downgrade syncbin from ${OLD} to ${NEW}, aborting" >&2
    exit 1
fi
if [[ ${NEWMINOR} -gt ${OLDMINOR} ]]; then
    if [[ ${OLDMINOR} -lt 3 ]]; then # update to first version with working update script
        echo '[ ** ] To update, the syncbin install script will re-run now.'
        sh config/install.sh || echo '[ !! ] Updating syncbin failed, please run again manually.' >&2
        exit 0
    else
        if [[ ${OLDMINOR} -lt 5 ]]; then
            if [[ "$(uname -s)" == "Darwin" ]]; then
                brew install zsh-completions
            else
                githubinstall zsh-users zsh-completions
            fi
        fi
        if [[ ${OLDMINOR} -lt 6 ]]; then
            if [[ "$(uname -s)" == "Linux" ]] && [[ "$(lsb_release -si)" == "Debian" ]]; then
                if where "command-not-found" &> /dev/null; then
                    : # command-not-found handler already installed
                else
                    echo '[ ** ] syncbin now supports command-not-found, install using `sudo apt-get install command-not-found`'
                fi
            fi
        fi
        if [[ ${OLDMINOR} -lt 7 ]]; then
            if where lns &> /dev/null; then
                # lns already installed
            else
                mkdir -p ~/bin &&
                cd ~/bin
                if (where curl &> /dev/null && curl -Ls http://www.chiark.greenend.org.uk/~sgtatham/utils/lns.tar.gz | tar -xzf -) || (where wget &> /dev/null && wget -qO - http://www.chiark.greenend.org.uk/~sgtatham/utils/lns.tar.gz | tar -xzf -); then
                    rm -f lns.tar.gz
                    mv lns .lnsdir
                    mv .lnsdir/lns lns
                    rm -rf .lnsdir
                    chmod +x lns
                    cd -
                else
                    echo '[ !! ] failed to install lns, you can install manually from http://www.chiark.greenend.org.uk/~sgtatham/utils/' >&2
                fi
            fi
        fi
    fi
    echo '[ ** ]' "syncbin has been updated from ${OLD} to ${NEW}, relog for changes to take effect"
    exit 0
fi
echo '[ ** ] syncbin has been patched, relog for changes to take effect'
