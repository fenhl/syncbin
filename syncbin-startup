#!/bin/zsh

DESCRIPTION=$'Run startup scripts for Fenhl\'s syncbin.'

USAGE=$'Usage:
. syncbin-startup [options]
  syncbin-startup -h | --help'

OPTIONS=$'Options:
  -h, --help          Print this message and exit.
  --ignore-lock       Release and ignore the lock that prevents this script from running multiple times at once.
  --no-internet-test  Do not run `syncbin-hasinet\' to test for internet connectivity, but run all other startup scripts regardless.'

function is-omz-plugin {
    [[ -f "$1"/plugins/"$2"/"$2".plugin.zsh ]] || [[ -f "$1"/plugins/"$2"/_"$2" ]]
}

function print-progress {
    if where clear-eol &> /dev/null; then
        printf '['"$1"'] '
        clear-eol
        printf "$2"'\r'
    else
        printf '['"$1"'] '"$2"'\r'
    fi
}

function print-warning {
    if where clear-eol &> /dev/null; then
        printf '[ !! ] '
        clear-eol
        printf 'warning: '"$1"'\n'
    else
        printf '[ !! ] warning: '"$1"'\n'
    fi
    print-progress "$2" "$3"
}

function lockdir {
    echo /tmp/syncbin-startup-"$1".lock
}

function lock {
    if [[ "$IGNORELOCK" == "0" ]]; then
        print-warning 'releasing startup lock' "$2" 'acquiring startup lock: '"$1"
        rm -rf "$lockdir"
    else
        print-progress "$2" 'acquiring startup lock: '"$1"
        until mkdir "$(lockdir $1)" &> /dev/null; do
            sleep 1
            if [[ "$2" == '=...' ]]; then
                printf '[.=..]\r'
                sleep 1
                printf '[..=.]\r'
                sleep 1
                printf '[...=]\r'
                sleep 1
                printf '[..=.]\r'
                sleep 1
                printf '[.=..]\r'
                sleep 1
                printf '[=...]\r'
            fi
        done
        trap 'rm -rf '"$(lockdir $1)" HUP TERM INT # remove lock when script finishes
    fi
}

function try-lock {
    if [[ "$IGNORELOCK" == "0" ]]; then
        print-warning 'releasing startup lock' "$2" 'acquiring startup lock: '"$1"
        rm -rf "$lockdir"
    else
        if mkdir "$(lockdir $1)" &> /dev/null; then
            trap 'rm -rf '"$(lockdir $1)" HUP TERM INT # remove lock when script finishes
        else
            return 1
        fi
    fi
}

function unlock {
    rmdir "$(lockdir $1)" # remove lock
    trap ':' HUP TERM INT # neutralize trap
}

IGNOREINET=1
IGNORELOCK=1

while [[ $# -gt "0" ]]; do
    if [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
        echo "$DESCRIPTION"
        echo
        echo "$USAGE"
        echo
        echo "$OPTIONS"
        exit 0
    fi
    if [[ "$1" == "--no-internet-test" ]]; then
        IGNOREINET=0
    elif [[ "$1" == "--ignore-lock" ]]; then
        IGNORELOCK=0
    else
        echo $USAGE >&2
        exit 1
    fi
    shift
done

lock syncbin-omz '=...'

print-progress '==..' 'running startup script: syncbin hasinet'

if [[ "$IGNOREINET" == "1" ]] && where syncbin-hasinet &> /dev/null; then
    syncbin-hasinet
    SYNCBINHASINET=$?
else
    SYNCBINHASINET=0
fi
unlock syncbin-omz
if [[ $SYNCBINHASINET -eq 0 ]]; then
    if where apt-get-wrapper &> /dev/null; then
        lock debian '==..'
        print-progress '===.' 'running startup script: apt'
        apt-get-wrapper
        unlock debian
    fi
    # softwareupdate consistently taking over a minute, disabling for now
    #if where softwareupdate-wrapper &> /dev/null; then
    #    try-lock softwareupdate '===.' && { # don't wait for this lock, one check at a time is enough
    #        print-progress '===.' 'running startup script: softwareupdate'
    #        softwareupdate-wrapper
    #    }
    #    unlock softwareupdate
    #fi
    lock ruby '===.'
    print-progress '===.' 'running startup script: brew'
    if where brew &> /dev/null; then
        if [[ -d "${XDG_DATA_HOME:-${HOME}/.local/share}/syncbin" ]] && [[ -w "${XDG_DATA_HOME:-${HOME}/.local/share}/syncbin" ]]; then
            BREWUPDATEOUTPUT=$(brew update)
            if [[ "$BREWUPDATEOUTPUT" != "Already up-to-date." ]]; then
                echo "$BREWUPDATEOUTPUT" >! ${XDG_DATA_HOME:-${HOME}/.local/share}/syncbin/brew.log
                brew upgrade --all &>>! ${XDG_DATA_HOME:-${HOME}/.local/share}/syncbin/brew.log 2>&2
            fi
        else
            print-warning 'cannot log brew output' '===.' 'running startup script: brew'
            brew update &> /dev/null
            brew upgrade > /dev/null
        fi
    fi
    print-progress '===.' 'running startup script: gem'
    if where gem-wrapper &> /dev/null; then
        gem-wrapper
    fi
    unlock ruby
    print-progress '===.' 'running startup script: rustup'
    # rustup has its own lock
    if where multirust &> /dev/null; then
        if ! multirust show-override | grep 'no override' &> /dev/null; then
            print-warning 'multirust toolchain overridden for '"$(pwd)" '===.' 'running startup script: rustup'
        elif [[ "$(multirust show-default | grep 'default toolchain' | awk '{print $4}')" != "stable" ]]; then
            print-warning 'multirust not defaulting to stable' '===.' 'running startup script: rustup'
        fi
        rustup --quiet --no-project
    elif where rustc &> /dev/null; then
        print-warning 'multirust not installed' '===.' 'running startup script: rustup'
    fi
    print-progress '===.' 'running startup script: gitdir'
    if [[ -d /opt/hub ]]; then
        print-warning '/opt/hub exists' '===.' 'running startup script: gitdir'
    fi
    if [[ -d ~/hub ]]; then
        print-warning '~/hub exists' '===.' 'running startup script: gitdir'
    fi
    #TODO add a script that updates the gitdirs
    lock syncbin-omz '===.'
    print-progress '===.' 'running startup script: syncbin update'
    if [[ -d /opt/git/fenhl.net/syncbin-private/master ]] || [[ -d ~/git/fenhl.net/syncbin-private/master ]]; then
        syncbin update
    else
        syncbin update public
    fi
    print-progress '===.' 'running startup script: oh-my-zsh'
    oh-my-zsh update
    unlock syncbin-omz
else
    print-warning 'no internet connection, skipping some startup script' '==..' 'running startup script: syncbin hasinet'
fi
lock syncbin-omz '===.'
print-progress '====' 'running startup script: oh-my-zsh'
for plugin ($OMZ_PLUGINS); do
    if is-omz-plugin ${HOME}/git/github.com/robbyrussell/oh-my-zsh/master $plugin; then
        fpath=(${HOME}/git/github.com/robbyrussell/oh-my-zsh/master/plugins/$plugin $fpath)
    elif is-omz-plugin /opt/git/github.com/robbyrussell/oh-my-zsh/master $plugin; then
        fpath=(/opt/git/github.com/robbyrussell/oh-my-zsh/master/plugins/$plugin $fpath)
    else
        print-warning 'unknown oh-my-zsh plugin: '"$plugin" '====' 'running startup script: oh-my-zsh'
    fi
done
print-progress '====' 'running startup script: compinit'
autoload -U compinit
compinit -D -u
print-progress '====' 'running startup script: aliases'
. aliases zsh
. aliases zsh-suffix
unlock syncbin-omz
print-progress '====' 'running startup script: syncbin-private'
if [[ -d /opt/git/fenhl.net/syncbin-private/master ]]; then
    if [[ -x /opt/git/fenhl.net/syncbin-private/master/syncbin-startup ]]; then
        . /opt/git/fenhl.net/syncbin-private/master/syncbin-startup
    fi
elif [[ -d ~/git/fenhl.net/syncbin-private/master ]]; then
    if [[ -x ~/git/fenhl.net/syncbin-private/master/syncbin-startup ]]; then
        . ~/git/fenhl.net/syncbin-private/master/syncbin-startup
    fi
else
    print-warning 'syncbin-private not installed' '====' 'running startup script: syncbin-private'
fi
print-progress '====' 'running startup script: zshrc'
if where zshrc &> /dev/null; then
    . zshrc
fi
