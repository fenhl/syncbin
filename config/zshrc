stty -echo # don't show input while loading
stty -ixon # disable flow control

printf '[....] defining environment variables and behavior\r'

OMZ_PLUGINS=(autojump command-not-found encode64 osx ruby terminalapp)
. "${GITDIR}/github.com/fenhl/syncbin/master/config/fenhl.zsh-theme"

if [ -r "${GITDIR}/github.com/fenhl/syncbin/master/config/zshrc_$TERM_PROGRAM" ]; then
    . "${GITDIR}/github.com/fenhl/syncbin/master/config/zshrc_$TERM_PROGRAM"
fi

# theme settings
DEFAULT_USER="fenhl"
DEFAULT_HOST="fenubookair.local"

CASE_SENSITIVE="true"
COMPLETION_WAITING_DOTS="true"
DISABLE_CORRECTION="true"
#DISABLE_UNTRACKED_FILES_DIRTY="true" # disable marking untracked files under VCS as dirty. This makes repository status check for large repositories much, much faster.

setopt auto_cd # using a directory as a command cds there instead
unsetopt hist_verify # don't “verify” history expansions (meaning I have to hit return twice), run them directly
setopt interactive_comments # allow comments in interactive shells
setopt list_packed # try to make menu completion more compact
unsetopt share_history # don't share history between different sessions

# ^O edits last viewed file if the line buffer is empty
#TODO fix me
edit_last_or_accept_line_and_down_history () {
    if ([[ "!!:0" =~ "~.*" ]] || [[ "!!:0" =~ ".*/.*" ]]) && [[ -z $LBUFFER ]] && [[ -z $RBUFFER ]]; then
        LBUFFER='edit !!:$'
    elif [[ "!!:1" =~ "(cat|dog|edit|head|jpy|less|nano|ssel|tac|tail|view)" ]] && [[ -z $LBUFFER ]] && [[ -z $RBUFFER ]]; then
        LBUFFER='edit !!:*'
    fi
    zle accept-line-and-down-history
}
zle -N edit_last_or_accept_line_and_down_history
bindkey "^O" edit_last_or_accept_line_and_down_history

# ^S inserts sudo, then inserts -u, then inserts -s
insert_sudo () {
    if [[ "$BUFFER" == "sudo -su"* ]]; then
        printf "\a"
    elif [[ "$BUFFER" == "sudo -u"* ]]; then
        buffer_suffix="${BUFFER#sudo -u}" # remove sudo -u prefix
        BUFFER="sudo -su ${buffer_suffix# }" # remove leading space, if any
        if [[ "$CURSOR" -ge 6 ]]; then
            CURSOR=$(($CURSOR + 1))
        fi
    elif [[ "$BUFFER" == "sudo " ]]; then
        CURSOR=5
        zle -U -- "-u "
    elif [[ "$BUFFER" == "sudo"* ]]; then
        CURSOR=4
        zle -U " -u "
    else
        BUFFER="sudo $BUFFER"
        CURSOR=$(($CURSOR + 5))
    fi
}
zle -N insert_sudo
bindkey "^S" insert_sudo

# "cd.." to "cd .." and "..." to "../.."
# taken and expanded from bl1nk's zshrc http://git.kuchen.io/markus/dotfiles.git/tree/zsh/.zshrc
rationalise_dot () {
    if [[ $LBUFFER == "cd "* ]] || [[ $LBUFFER =~ "[^ ]*" ]]; then
        if [[ $LBUFFER = *.. ]]; then
            LBUFFER+=/..
        elif [[ $LBUFFER == "cd." ]]; then
            LBUFFER="cd .."
        else
            LBUFFER+=.
        fi
    else
        LBUFFER+=.
    fi
}
zle -N rationalise_dot
bindkey . rationalise_dot

# completion style
#zstyle ":completion:*:descriptions" format "%B%d%b" # always show completion type in menu completion

# additional completions
fpath=(~/.config/syncbin/zsh-completions /opt/git/fenhl.net/syncbin-private/master/zsh-completions ~/git/fenhl.net/syncbin-private/master/zsh-completions /opt/git/github.com/fenhl/syncbin/master/zsh-completions ~/git/github.com/fenhl/syncbin/master/zsh-completions /usr/local/share/zsh-completions /opt/git/github.com/zsh-users/zsh-completions/master/src ~/git/github.com/zsh-users/zsh-completions/master/src /usr/local/share/zsh/functions /usr/local/share/zsh/site-functions $fpath)

# access the online help, for brew
if where brew &> /dev/null; then
    unalias run-help &> /dev/null
    autoload run-help
    HELPDIR=/usr/local/share/zsh/helpfiles
fi

# startup scripts
. syncbin-startup

printf '[====] '
if where clear-eol &> /dev/null; then
    clear-eol
fi
printf 'starting zsh session\r'

# load syntax highlighting
if [[ -d /usr/local/share/zsh-syntax-highlighting ]]; then # Homebrew
    . /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
elif [[ -d /opt/git/github.com/zsh-users/zsh-syntax-highlighting/master ]]; then # global gitdir
    #TODO update in syncbin-startup
    . /opt/git/github.com/zsh-users/zsh-syntax-highlighting/master/zsh-syntax-highlighting.zsh
elif [[ -d ~/git/github.com/zsh-users/zsh-syntax-highlighting/master ]]; then # local gitdir
    #TODO update in syncbin-startup
    . ~/git/github.com/zsh-users/zsh-syntax-highlighting/master/zsh-syntax-highlighting.zsh
fi

# reënable input
stty echo
