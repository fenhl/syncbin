# don't show input while loading
stty -echo

printf '[....] loading oh-my-zsh\r'

if [[ -d /opt/hub/robbyrussell/oh-my-zsh ]]; then
    ZSH=/opt/hub/robbyrussell/oh-my-zsh
else
    ZSH=${HOME}/hub/robbyrussell/oh-my-zsh
fi
ZSH_THEME="fenhl"
DEFAULT_USER="fenhl"
DEFAULT_HOST="fenubookair.local"

# autoupdate
DISABLE_UPDATE_PROMPT=true
export UPDATE_ZSH_DAYS=1

CASE_SENSITIVE="true"
COMPLETION_WAITING_DOTS="true"
DISABLE_CORRECTION="true"
#DISABLE_UNTRACKED_FILES_DIRTY="true" # disable marking untracked files under VCS as dirty. This makes repository status check for large repositories much, much faster.

plugins=(autojump brew git mosh osx pip zsh-syntax-highlighting)

printf '[=...] updating omz     \r'

source $ZSH/oh-my-zsh.sh

printf '[==..] defining environment variables and aliases\r'

unsetopt hist_verify # don't “verify” history expansions (meaning I have to hit return twice), run them directly
setopt interactive_comments # allow comments in interactive shells
setopt list_packed # try to make menu completion more compact
unsetopt share_history # don't share history between different sessions

# ^O edits last viewed file if the line buffer is empty
#TODO fix me
edit_last_or_accept_line_and_down_history () {
    if ([[ "!!:0" =~ "~.*" ]] || [[ "!!:0" =~ ".*/.*" ]]) && [[ -z $LBUFFER ]] && [[ -z $RBUFFER ]]; then
        LBUFFER='edit !!:$'
    elif [[ "!!:1" =~ "(cat|dog|edit|head|jpy|less|nano|ssel|tac|tail|view)" ]] && [[ -z $LBUFFER ]] && [[ -z $RBUFFER ]]; then
        LBUFFER='edit !!:*'
    fi
    zle accept-line-and-down-history
}
zle -N edit_last_or_accept_line_and_down_history
bindkey "^O" edit_last_or_accept_line_and_down_history

# ^S inserts sudo
insert_sudo () {
    if [[ $LBUFFER == "sudo "* ]]; then
        LBUFFER+="sudo "
    else
        LBUFFER="sudo "$LBUFFER
        #zle beginning-of-line
        #zle -U "sudo "
    fi
}
zle -N insert_sudo
bindkey "^S" insert_sudo

# "cd.." to "cd .." and "..." to "../.."
# taken and expanded from bl1nk's zshrc http://git.kuchen.io/markus/dotfiles.git/tree/zsh/.zshrc
rationalise_dot () {
    if [[ $LBUFFER == "cd "* ]] || [[ $LBUFFER =~ "[^ ]*" ]]; then
        if [[ $LBUFFER = *.. ]]; then
            LBUFFER+=/..
        elif [[ $LBUFFER == "cd." ]]; then
            LBUFFER="cd .."
        else
            LBUFFER+=.
        fi
    else
        LBUFFER+=.
    fi
}
zle -N rationalise_dot
bindkey . rationalise_dot

# additional completions
fpath=(~/.config/syncbin/zsh-completions /usr/local/share/zsh-completions /opt/hub/zsh-users/zsh-completions/src $fpath)

# load command-not-found handler
if [[ -r /etc/zsh_command_not_found ]]; then
    . /etc/zsh_command_not_found
fi

# access the online help, for brew
if where brew &> /dev/null; then
    unalias run-help
    autoload run-help
    HELPDIR=/usr/local/share/zsh/helpfiles
fi

# add aliases from syncbin
if [[ -d /opt/hub/fenhl/syncbin ]]; then
    . /opt/hub/fenhl/syncbin/aliases define
    . /opt/hub/fenhl/syncbin/aliases define-suffix
elif [[ -d ${HOME}/hub/fenhl/syncbin ]]; then
    . ${HOME}/hub/fenhl/syncbin/aliases define
    . ${HOME}/hub/fenhl/syncbin/aliases define-suffix
fi

printf '[===.] running startup scripts: syncbin-hasinet  \r'

# startup scripts
if where syncbin-hasinet &> /dev/null; then
    syncbin-hasinet
    SYNCBINHASINET=$?
else
    SYNCBINHASINET=0
fi
if [[ $SYNCBINHASINET -eq 0 ]]; then
    printf '[===.] running startup scripts: apt-get-wrapper\r'
    if where apt-get-wrapper &> /dev/null; then
        apt-get-wrapper
    fi
    printf '[===.] running startup scripts: softwareupdate-wrapper\r'
    if where softwareupdate-wrapper &> /dev/null; then
        softwareupdate-wrapper
    fi
    printf '[===.] running startup scripts: brew                  \r'
    if where brew &> /dev/null; then
        brew update > /dev/null
        brew upgrade > /dev/null
    fi
    printf '[===.] running startup scripts: gem \r'
    if where gem-wrapper &> /dev/null; then
        gem-wrapper
    fi
    printf '[===.] running startup scripts: hub\r'
    #if where hub &> /dev/null; then
    #    if [[ -d /opt/hub/fenhl/syncbin ]]; then
    #        cd /opt/hub/fenhl/syncbin &&
    #        hub pull > /dev/null &&
    #        cd - > /dev/null
    #    elif [[ -d ${HOME}/hub/fenhl/syncbin ]]; then
    #        cd ${HOME}/hub/fenhl/syncbin &&
    #        hub pull > /dev/null &&
    #        cd - > /dev/null
    #    fi
    #fi
    printf '[===.] running startup scripts: compinit\r'
    if where compinit &> /dev/null; then
        compinit -D -u
    fi
    printf '[===.] running startup scripts: syncbin-update\r'
    if where syncbin-update &> /dev/null; then
        syncbin-update 
    fi
fi
printf '[===.] running startup scripts: zshrc         \r'
if where zshrc &> /dev/null; then
    . zshrc
fi

printf '[====] starting zsh session   \r'

# reënable input
stty echo
